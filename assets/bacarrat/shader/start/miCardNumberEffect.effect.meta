{
  "ver": "1.0.27",
  "uuid": "baf20088-e6c6-4009-8b7d-a758ed3547c6",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\n  precision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n  attribute vec3 a_position;\n  attribute vec4 a_color;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n  #endif\n  uniform vec4 xlistSymmetricPos;\nuniform vec4 ylistSymmetricPos;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform vec2 disYSymmetricPos;\nuniform vec2 disXSymmetricPos;\nuniform vec2 worldPos;\nuniform float worldSprWidth;\nuniform float worldSprHeight;\n  vec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n    float disX = pos2.x - pos1.x;\n    float disY = pos2.y - pos1.y;\n    if (disX == 0.0)\n    {\n        float x = pos1.x - sp.x;\n        return vec2(pos1.x + x,sp.y);\n    }\n    float k1 = disY/disX;\n    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);\n    float x = (y - sp.y)/(-1.0/k1)+sp.x;\n    return vec2(x,y);\n}\n  void main () {\n    vec2 pos1 = vec2(0.0,0.0);\n    vec2 pos2 = vec2(0.0,0.0);\n    if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)\n    {\n        if (disXSymmetricPos[0] == 0.0)\n        {\n            pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);\n            pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);\n        }\n        else\n        {\n            pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);\n            pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);\n        }\n    }\n    else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)\n    {\n        if (disYSymmetricPos[0] == 0.0)\n        {\n            pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n            pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n        }\n        else\n        {\n            pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n            pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n        }\n    }\n    else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){\n        pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);\n        pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);\n    }\n    vec2 sp = vec2(a_position.x, a_position.y);\n    vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n    vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);\n    tmp_pos.x = symmetricPos.x ;\n    tmp_pos.y = symmetricPos.y ;\n    vec4 pos = tmp_pos;\n    #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n    #else\n    pos = cc_matViewProj * pos;\n    #endif\n    #if USE_TEXTURE\n    v_uv0 = a_uv0;\n    #endif\n    v_color = a_color;\n    gl_Position = pos ;\n  }",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform vec4 xlist;\nuniform vec4 ylist;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform float sprWidth;\nuniform float sprHight;\n  bool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*sprWidth;\n    float dy = py*sprHight;\n    if (disX[0] != 0.0 || disX[1] != 0.0)\n    {\n        if (dx >= disX[0] && dx <= disX[1]){\n            return true;\n        }\n    }\n    else if (disY[0] != 0.0 || disY[1] != 0.0)\n    {\n        if (dy >= disY[0] && dy <= disY[1]){\n            return true;\n        }\n    }\n    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )\n    {\n       b = !b;\n    }\n    return b;\n  }\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    bool hide = isHide(v_uv0.x,v_uv0.y);\n    if (!hide)\n    {\n      o.a = 0.0;\n    }\n    gl_FragColor = o;\n  }"
      },
      "glsl3": {
        "vert": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in vec3 a_position;\n  in vec4 a_color;\n  out vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n  #endif\n  uniform PointData {\n    vec4 xlist = vec4(0.0,0.0,0.0,0.0);\n    vec4 ylist = vec4(0.0,0.0,0.0,0.0);\n    vec4 xlistSymmetricPos = vec4(0.0,0.0,0.0,0.0);\n    vec4 ylistSymmetricPos = vec4(0.0,0.0,0.0,0.0);\n    vec2 disX = vec2(0.0,0.0);\n    vec2 disY = vec2(0.0,0.0);\n    vec2 disYSymmetricPos = vec2(0.0,0.0);\n    vec2 disXSymmetricPos = vec2(0.0,0.0);\n    vec2 worldPos = vec2(0.0,0.0);\n    float sprWidth = 0.0;\n    float sprHight = 0.0;\n    float worldSprWidth = 0.0;\n    float worldSprHeight = 0.0;\n  };\n  vec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)\n{\n    float disX = pos2.x - pos1.x;\n    float disY = pos2.y - pos1.y;\n    if (disX == 0.0)\n    {\n        float x = pos1.x - sp.x;\n        return vec2(pos1.x + x,sp.y);\n    }\n    float k1 = disY/disX;\n    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);\n    float x = (y - sp.y)/(-1.0/k1)+sp.x;\n    return vec2(x,y);\n}\n  void main () {\n    vec2 pos1 = vec2(0.0,0.0);\n    vec2 pos2 = vec2(0.0,0.0);\n    if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)\n    {\n        if (disXSymmetricPos[0] == 0.0)\n        {\n            pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);\n            pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);\n        }\n        else\n        {\n            pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);\n            pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);\n        }\n    }\n    else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)\n    {\n        if (disYSymmetricPos[0] == 0.0)\n        {\n            pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n            pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);\n        }\n        else\n        {\n            pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n            pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);\n        }\n    }\n    else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){\n        pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);\n        pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);\n    }\n    vec2 sp = vec2(a_position.x, a_position.y);\n    vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);\n    vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);\n    tmp_pos.x = symmetricPos.x ;\n    tmp_pos.y = symmetricPos.y ;\n    vec4 pos = tmp_pos;\n    #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n    #else\n    pos = cc_matViewProj * pos;\n    #endif\n    #if USE_TEXTURE\n    v_uv0 = a_uv0;\n    #endif\n    v_color = a_color;\n    gl_Position = pos ;\n  }",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform PointData {\n    vec4 xlist = vec4(0.0,0.0,0.0,0.0);\n    vec4 ylist = vec4(0.0,0.0,0.0,0.0);\n    vec4 xlistSymmetricPos;\n    vec4 ylistSymmetricPos;\n    vec2 disX = vec2(0.0,0.0);\n    vec2 disY = vec2(0.0,0.0);\n    vec2 disYSymmetricPos;\n    vec2 disXSymmetricPos;\n    vec2 worldPos;\n    float sprWidth = 0.0;\n    float sprHight = 0.0;\n    float worldSprWidth;\n    float worldSprHeight;\n  };\n  bool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*sprWidth;\n    float dy = py*sprHight;\n    if (disX[0] != 0.0 || disX[1] != 0.0)\n    {\n        if (dx >= disX[0] && dx <= disX[1]){\n            return true;\n        }\n    }\n    else if (disY[0] != 0.0 || disY[1] != 0.0)\n    {\n        if (dy >= disY[0] && dy <= disY[1]){\n            return true;\n        }\n    }\n    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )\n    {\n       b = !b;\n    }\n    return b;\n  }\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    bool hide = isHide(v_uv0.x,v_uv0.y);\n    if (!hide)\n    {\n      o.a = 0.0;\n    }\n    gl_FragColor = o;\n  }"
      }
    }
  ],
  "subMetas": {}
}