{
  "ver": "1.0.27",
  "uuid": "10493b20-1d51-43ec-8407-3cf72d2e01de",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform vec4 xlist;\nuniform vec4 ylist;\nuniform vec2 disX;\nuniform vec2 disY;\nuniform float sprWidth;\nuniform float sprHight;\n  bool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*sprWidth;\n    float dy = py*sprHight;\n    if (disX[0] != 0.0 || disX[1] != 0.0)\n    {\n        if (dx >= disX[0] && dx <= disX[1]){\n            return true;\n        }\n    }\n    else if (disY[0] != 0.0 || disY[1] != 0.0)\n    {\n        if (dy >= disY[0] && dy <= disY[1]){\n            return true;\n        }\n    }\n    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )\n    {\n       b = !b;\n    }\n    return b;\n  }\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    bool hide = isHide(v_uv0.x,v_uv0.y);\n    if (hide)\n    {\n      o.a = 0.0;\n    }\n    gl_FragColor = o;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform PointData {\n  vec4 xlist = vec4(0.0,0.0,0.0,0.0);\n  vec4 ylist = vec4(0.0,0.0,0.0,0.0);\n  vec2 disX = vec2(0.0,0.0);\n  vec2 disY = vec2(0.0,0.0);\n  float sprWidth = 0.0;\n  float sprHight = 0.0;\n};\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform PointData {\n    vec4 xlist = vec4(0.0,0.0,0.0,0.0);\n    vec4 ylist = vec4(0.0,0.0,0.0,0.0);\n    vec2 disX = vec2(0.0,0.0);\n    vec2 disY = vec2(0.0,0.0);\n    float sprWidth = 0.0;\n    float sprHight = 0.0;\n  };\n  bool isHide(float px , float py)\n{\n    bool b = false;\n    float dx = px*sprWidth;\n    float dy = py*sprHight;\n    if (disX[0] != 0.0 || disX[1] != 0.0)\n    {\n        if (dx >= disX[0] && dx <= disX[1]){\n            return true;\n        }\n    }\n    else if (disY[0] != 0.0 || disY[1] != 0.0)\n    {\n        if (dy >= disY[0] && dy <= disY[1]){\n            return true;\n        }\n    }\n    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )\n    {\n       b = !b;\n    }\n    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )\n    {\n       b = !b;\n    }\n    return b;\n  }\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    bool hide = isHide(v_uv0.x,v_uv0.y);\n    if (hide)\n    {\n      o.a = 0.0;\n    }\n    gl_FragColor = o;\n  }"
      }
    }
  ],
  "subMetas": {}
}